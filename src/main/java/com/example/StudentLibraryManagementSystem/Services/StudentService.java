package com.example.StudentLibraryManagementSystem.Services;

import com.example.StudentLibraryManagementSystem.DTO.UpdateMobileRequestDTO;
import com.example.StudentLibraryManagementSystem.Enums.CardStatus;
import com.example.StudentLibraryManagementSystem.Models.Card;
import com.example.StudentLibraryManagementSystem.Models.Student;
import com.example.StudentLibraryManagementSystem.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {
    @Autowired
    StudentRepository studentRepository;

    public String createStudent(Student student){

        //basic attributes will be already set form postman


        //card should be autogenerated whenever a student is created or this createStudent function is called.
        //plan is to save the card in db ,so we need to set the non autogenerated values first and then save.
        Card card=new Card();   //creating new card
        card.setCardstatus(CardStatus.ACTIVATED);  //setting card status to active
        card.setStudentVariableName(student);      //setting this will help to set the foreign key attribute.


        //let's move to student and set its attributes
        student.setCard(card);  //setting card for student

        //if there was unidirectional mapping we need to save both parent and child but in bidirectional mapping
        // child is saved automatically

        studentRepository.save(student); //by cascading effect child will be automatically saved.

       return "Student & Card added successfully";
    }

    public String findNameByEmail(String email){
        Student student=studentRepository.findByEmail(email);
        return student.getName();
    }

    public List<Student> findByCountry(String country){
        List<Student> students=studentRepository.findByCountry(country);
        return students;
    }

   /* public String updateMobNo(Student newStudent){

        //first try fetching original data
        Student originalStudent=studentRepository.findById(newStudent.getId()).get();

        //we will keep the other attributes as it is and change the required parameters
        originalStudent.setMobile_no(newStudent.getMobile_no());
        studentRepository.save(originalStudent);
        return "student updated successfully";
    }

    */
   public String updateMobNo(UpdateMobileRequestDTO updateMobileRequestDTO){

       //first try fetching original data
       Student originalStudent=studentRepository.findById(updateMobileRequestDTO.getId()).get();

       //we will keep the other attributes as it is and change the required parameters
       originalStudent.setMobile_no(updateMobileRequestDTO.getMobile_no());

       //entity object being saved
       studentRepository.save(originalStudent);
       return "student updated successfully";
   }

}
